Input: arr[] = {1, 2, 3, 3}, X = 6 
Output: 3 
All the possible subsets are {1, 2, 3}, 
{1, 2, 3} and {3, 3}

Input: arr[] = {1, 1, 1, 1}, X = 1 
Output: 4 

code:
class Solution {
    static int subsetSumCount(int[] arr, int n, int targetSum) {
        // dp[i][j] will be true if there is a subset of arr[0..i-1]
        // with a sum equal to j.

        int[][] dp = new int[n + 1][targetSum + 1];
        
        // Initialize the first column. An empty set has a sum of 0.

        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= targetSum; j++) {
                if (i == 0) {
                    dp[i][j] = 0;
                } else if (j == 0) {
                    dp[i][j] = 1;
                } else {
                    // If the current element is greater than the target sum,
                    // exclude it and consider the subset count without it.
                    if (arr[i - 1] > j) {
                        dp[i][j] = dp[i - 1][j];
                    } else {
                        // Include or exclude the current element and sum up the counts.
                        dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]];
                    }
                }
            }
        }

        // The bottom-right cell contains the count of subsets with the target sum.
        return dp[n][targetSum];
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 3};
        int targetSum1 = 6;
        System.out.println(subsetSumCount(arr1, arr1.length, targetSum1)); // Output: 3

        int[] arr2 = {1, 1, 1, 1};
        int targetSum2 = 1;
        System.out.println(subsetSumCount(arr2, arr2.length, targetSum2)); // Output: 4
    }
}
