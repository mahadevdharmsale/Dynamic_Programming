Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Explanation: Choose the last item that weighs 1 unit and holds a value of 3. 


Recursive code:
/* A recursive implementation 
of 0-1 Knapsack problem */
class Knapsack { 

	// A utility function that returns 
	// maximum of two integers 

	static int max(int a, int b) { return (a > b) ? a : b; } 

	// Returns the maximum value that 
	// can be put in a knapsack of 
	// capacity W 
	static int knapSack(int W, int wt[], int val[], int n) 
	{ 
		// Base Case 
		if (n == 0 || W == 0) 
			return 0; 

		// If weight of the nth item is 
		// more than Knapsack capacity W, 
		// then this item cannot be included 
		// in the optimal solution 

		if (wt[n - 1] > W) 
			return knapSack(W, wt, val, n - 1); 

		// Return the maximum of two cases: 
		// (1) nth item included 
		// (2) not included 
		else
			return max(val[n - 1] 
						+ knapSack(W - wt[n - 1], wt, 
									val, n - 1), 
					knapSack(W, wt, val, n - 1)); 
	} 

	// Driver code 
	public static void main(String args[]) 
	{ 
		int profit[] = new int[] { 60, 100, 120 }; 
		int weight[] = new int[] { 10, 20, 30 }; 
		int W = 50; 
		int n = profit.length; 
		System.out.println(knapSack(W, weight, profit, n)); 
	} 
} 
/*Output of above code: 220*/



//Bottom-Up Approach 


Code:

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         int k[][]=new int[n+1][W+1];
         for(int i=0;i<=n;i++){
             for(int j=0;j<=W;j++){
                 if(i==0 ||j==0){
                     k[i][j]=0;
                 }
                 else if(wt[i-1]<=j){
                     k[i][j]=Math.max(val[i-1]+k[i-1][j-wt[i-1]],k[i-1][j]);
                 }
                 else{
                     k[i][j]=k[i-1][j];
                 }
             }
         }
         return k[n][W];
    } 
}
