Input: arr[] = {1, 5, 11, 5}
Output: true 
The array can be partitioned as {1, 5, 5} and {11}

Input: arr[] = {1, 5, 3}
Output: false 
The array cannot be partitioned into equal sum sets


code:

Method 1:

class Solution{
    static int subSum(int N,int arr[],int sum)
    {
        int t[][]=new int[N+1][sum+1];
        for (int i = 0; i <= N; i++) {
         for (int j = 0; j <= sum; j++) {
        if (i == 0) {
            t[i][j] = 0;
        }
        if (j == 0) {
            t[i][j] = 1;
        }
    }
}

       for (int i = 1; i <= N; i++) {
    for (int j = 1; j <= sum; j++) {
        if (arr[i - 1] <= j) {
            t[i][j] = Math.max(t[i - 1][j - arr[i - 1]], t[i - 1][j]);
        } else {
            t[i][j] = t[i - 1][j];
        }
    }
}
return t[N][sum];

    }
    static int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++)
        {
            sum=sum+arr[i];
        }
        if(sum%2!=0)
        {
            return 0;
        }
        else {
            return subSum(N,arr,sum/2);
        }
    }
}


Methode:02


class Solution{
    static int equalPartition(int N, int arr[])
    {
        // code here
        int sum = 0;
        for(int i=0; i<N; i++) {
            sum += arr[i];
        }
        
        if(sum %2 == 1) return 0;
        
        sum /= 2;
        boolean[] dp = new boolean[sum+1];
        return (subset(arr, sum, N-1, dp) == true) ? 1:0;
    }
    
    static boolean subset(int[] arr, int sum , int N, boolean[] dp) {
        if(sum == 0) return true;
        if(N <= 0) return false;
        if(sum < 0) return false;
        
        if(dp[sum] == true) return false;
        
        return dp[sum] = subset(arr, sum-arr[N-1], N-1, dp) || subset(arr, sum, N-1, dp);
    }
}
